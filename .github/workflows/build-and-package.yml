name: Build and Package (Reusable)

on:
  workflow_call:
    outputs:
      production_version:
        description: 'Production version from build-preparation'
        value: ${{ jobs.build-preparation.outputs.production_version }}
      electron_version:
        description: 'Electron version from build-preparation'
        value: ${{ jobs.build-preparation.outputs.electron_version }}
      changelog_notes:
        description: 'Changelog notes from build-electron'
        value: ${{ jobs.build-electron.outputs.changelog_notes }}

jobs:
  build-preparation:
    runs-on: ubuntu-latest
    outputs:
      production_version: ${{ steps.get-production-version.outputs.version }}
      electron_version: ${{ steps.get-electron-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get production version from RAUX/package.json
        id: get-production-version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get electron version from RAUX/raux-electron/package.json
        id: get-electron-version
        run: |
          VERSION=$(jq -r .version raux-electron/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Get RAUX version from RAUX/raux-electron/package.json
        id: get-raux-version
        run: |
          VERSION=$(jq -r '."raux-version"' raux-electron/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using RAUX version: $VERSION for wheel building"

  build-wheel:
    needs: build-preparation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install wheel building dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools build

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Prepare build context for zipping
        run: |
          mkdir build-context
          cp dist/*.whl build-context/

      - name: Create build context zip
        run: |
          cd build-context
          zip -r ../raux-wheel-context.zip .

      - name: Upload build context zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: raux-wheel-context
          path: raux-wheel-context.zip
          retention-days: 7

  build-electron:
    needs: [build-preparation, build-wheel]
    runs-on: ubuntu-latest
    outputs:
      changelog_notes: ${{ steps.changelog.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'raux-electron/package-lock.json'

      - name: Extract CHANGELOG entry
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(awk 'BEGIN {print_section=0;} /^## \[/ {if (print_section == 0) {print_section=1;} else {exit;}} print_section {print;}' CHANGELOG.md)
          echo "Extracted latest release notes from CHANGELOG.md:" 
          echo -e "$CHANGELOG_CONTENT"
          # Use EOF delimiter to handle multiline content
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          cd raux-electron
          npm ci

      - name: Update production version in root package.json
        run: |
          jq '.version = "${{ needs.build-preparation.outputs.production_version }}"' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated root package.json version to ${{ needs.build-preparation.outputs.production_version }}"

      - name: Update electron version in raux-electron/package.json
        run: |
          cd raux-electron
          jq '.version = "${{ needs.build-preparation.outputs.electron_version }}"' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated raux-electron/package.json version to ${{ needs.build-preparation.outputs.electron_version }}"

      - name: Upload build context
        uses: actions/upload-artifact@v4
        with:
          name: build-context
          path: |
            raux-electron
            backend
            CHANGELOG.md
            package.json

  package-electron-windows:
    needs: [build-preparation, build-electron]
    runs-on: windows-latest
    steps:
      - name: Download build context
        uses: actions/download-artifact@v4
        with:
          name: build-context

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'raux-electron/package-lock.json'

      - name: Install dependencies
        run: |
          cd raux-electron
          npm ci

      - name: Build Electron app (Windows)
        run: |
          cd raux-electron
          $env:RAUX_VERSION = '${{ needs.build-preparation.outputs.production_version }}'
          npm run make

      - name: Rename installer to raux-setup.exe
        run: |
          mv raux-electron/out/make/squirrel.windows/x64/*.exe raux-electron/out/make/squirrel.windows/x64/raux-setup.exe
  
      - name: Create SHA256 checksum
        run: |
          $INSTALLER_PATH = "raux-electron/out/make/squirrel.windows/x64/raux-setup.exe"
          $CHECKSUM = (Get-FileHash -Path $INSTALLER_PATH -Algorithm SHA256).Hash.ToLower()
          $CHECKSUM | Out-File -FilePath "$INSTALLER_PATH.sha256" -Encoding ascii
          echo "Created checksum for installer: $CHECKSUM"

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: raux-setup.exe
          path: raux-electron/out/make/squirrel.windows/x64/raux-setup.exe
          retention-days: 7

      - name: Upload checksum artifact
        uses: actions/upload-artifact@v4
        with:
          name: raux-setup.exe.sha256
          path: raux-electron/out/make/squirrel.windows/x64/raux-setup.exe.sha256
          retention-days: 7

  package-electron-linux:
    needs: [build-preparation, build-electron]
    runs-on: ubuntu-latest
    steps:
      - name: Download build context
        uses: actions/download-artifact@v4
        with:
          name: build-context

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'raux-electron/package-lock.json'

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm fakeroot dpkg

      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Checking if backend exists:"
          ls -la backend/ || echo "backend directory not found"
          echo "Checking backend/requirements.txt:"
          ls -la backend/requirements.txt || echo "requirements.txt not found"

      - name: Install dependencies
        run: |
          cd raux-electron
          npm ci

      - name: Build Electron app (Linux)
        env:
          CI: true
        run: |
          cd raux-electron
          export RAUX_VERSION='${{ needs.build-preparation.outputs.production_version }}'
          npm run make

      - name: List build artifacts
        run: |
          echo "Contents of out directory:"
          ls -la raux-electron/out/
          echo "Contents of packaged app directory:"
          ls -la raux-electron/out/*/
          echo "Looking for executable:"
          find raux-electron/out -name "gaiaui" -type f -ls || echo "gaiaui executable not found"
          find raux-electron/out -name "gaia-ui" -type f -ls || echo "gaia-ui executable not found"
          echo "Contents of make directory:"
          ls -la raux-electron/out/make/

      - name: Create checksums for DEB package
        run: |
          DEB_PATH=$(find raux-electron/out/make/deb -name "*.deb" | head -1)
          if [ -n "$DEB_PATH" ]; then
            sha256sum "$DEB_PATH" > "$DEB_PATH.sha256"
            echo "Created checksum for DEB: $(cat $DEB_PATH.sha256)"
          fi

      - name: Create checksums for RPM package
        run: |
          RPM_PATH=$(find raux-electron/out/make/rpm -name "*.rpm" | head -1)
          if [ -n "$RPM_PATH" ]; then
            sha256sum "$RPM_PATH" > "$RPM_PATH.sha256"
            echo "Created checksum for RPM: $(cat $RPM_PATH.sha256)"
          fi

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: gaiaui-ubuntu.deb
          path: raux-electron/out/make/deb/**/*.deb
          retention-days: 7

      - name: Upload DEB checksum
        uses: actions/upload-artifact@v4
        with:
          name: gaiaui-ubuntu.deb.sha256
          path: raux-electron/out/make/deb/**/*.deb.sha256
          retention-days: 7

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: gaiaui-ubuntu.rpm
          path: raux-electron/out/make/rpm/**/*.rpm
          retention-days: 7

      - name: Upload RPM checksum
        uses: actions/upload-artifact@v4
        with:
          name: gaiaui-ubuntu.rpm.sha256
          path: raux-electron/out/make/rpm/**/*.rpm.sha256
          retention-days: 7 