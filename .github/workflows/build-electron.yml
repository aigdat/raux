name: Build and Release Electron App

on:
  workflow_dispatch:
    inputs:
      production-version:
        description: 'Product version to release (e.g., 0.6.5+raux.0.1.1)'
        required: true
        default: ''
      electron-version:
        description: 'Electron version to release (e.g., 0.1.1)'
        required: true
        default: ''

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      production_version: ${{ steps.get-production-version.outputs.version }}
      electron_version: ${{ steps.get-electron-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set production version
        id: get-production-version
        run: |
          VERSION="${{ github.event.inputs.production-version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set electron version
        id: get-electron-version
        run: |
          VERSION="${{ github.event.inputs.electron-version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-electron:
    needs: extract-version
    runs-on: ubuntu-latest
    outputs:
      changelog_notes: ${{ steps.changelog.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'raux-electron/package-lock.json'

      - name: Extract CHANGELOG entry
        id: changelog
        run: |
          pattern="## [v${{ needs.extract-version.outputs.production_version }}]"
          content=$(cat CHANGELOG.md)
          regex="(?s)$pattern(.*?)(?=\n## \[v|$)"
          notes=$(echo "$content" | perl -0777 -ne "print \$1 if /$regex/")
          if [ -z "$notes" ]; then
            notes="Release v${{ needs.extract-version.outputs.production_version }}%0ANo release notes available."
          fi
          notes="${notes//$'\n'/%0A}"
          echo "notes=$notes" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          cd raux-electron
          npm ci

      - name: Update production version in root package.json
        run: |
          jq '.version = "${{ needs.extract-version.outputs.production_version }}"' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated root package.json version to ${{ needs.extract-version.outputs.production_version }}"

      - name: Update electron version in raux-electron/package.json
        run: |
          cd raux-electron
          jq '.version = "${{ needs.extract-version.outputs.electron_version }}"' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated raux-electron/package.json version to ${{ needs.extract-version.outputs.electron_version }}"

      - name: Upload build context
        uses: actions/upload-artifact@v4
        with:
          name: build-context
          path: |
            raux-electron
            backend
            raux.env
            CHANGELOG.md
            package.json

  package-windows:
    needs: [extract-version, build-electron]
    runs-on: windows-latest
    steps:
      - name: Download build context
        uses: actions/download-artifact@v4
        with:
          name: build-context

      - name: Setup RAUX Environment
        run: |
          cp raux.env backend\.env

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'raux-electron/package-lock.json'

      - name: Install dependencies
        run: |
          cd raux-electron
          npm ci

      - name: Build Electron app (Windows)
        run: |
          cd raux-electron
          set RAUX_PROD_VERSION=${{ needs.extract-version.outputs.production_version }}
          npm run make

      - name: Create SHA256 checksum
        run: |
          $VERSION = "${{ needs.extract-version.outputs.production_version }}"
          $INSTALLER_PATH = "raux-electron/out/make/squirrel.windows/x64/raux-installer-$VERSION.exe"
          $CHECKSUM = (Get-FileHash -Path $INSTALLER_PATH -Algorithm SHA256).Hash.ToLower()
          $CHECKSUM | Out-File -FilePath "$INSTALLER_PATH.sha256" -Encoding ascii
          echo "Created checksum for installer: $CHECKSUM"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            raux-electron/out/make/squirrel.windows/x64/raux-installer-${{ needs.extract-version.outputs.production_version }}.exe
            raux-electron/out/make/squirrel.windows/x64/raux-installer-${{ needs.extract-version.outputs.production_version }}.exe.sha256
          retention-days: 7