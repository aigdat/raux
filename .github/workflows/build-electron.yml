name: Build and Release Electron App

on:
  workflow_dispatch:

jobs:
  build-preparation:
    runs-on: ubuntu-latest
    outputs:
      production_version: ${{ steps.get-production-version.outputs.version }}
      electron_version: ${{ steps.get-electron-version.outputs.version }}
      raux_version: ${{ steps.get-raux-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get production version from RAUX/package.json
        id: get-production-version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get electron version from RAUX/raux-electron/package.json
        id: get-electron-version
        run: |
          VERSION=$(jq -r .version raux-electron/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Get RAUX version from RAUX/raux-electron/package.json
        id: get-raux-version
        run: |
          VERSION=$(jq -r '."raux-version"' raux-electron/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using RAUX version: $VERSION for wheel building"

  build-wheel:
    needs: build-preparation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install wheel building dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools build

      - name: Build wheel
        run: |
          # Edit or create pyproject.toml to include version from workflow
          echo "Building wheel for RAUX v${{ needs.build-preparation.outputs.raux_version }}"
          
          # Remove 'v' prefix if present for pyproject.toml
          RAUX_VERSION="${{ needs.build-preparation.outputs.raux_version }}"
          if [[ $RAUX_VERSION == v* ]]; then
            RAUX_VERSION="${RAUX_VERSION:1}"
          fi
          
          sed -i "s/version = \".*\"/version = \"$RAUX_VERSION\"/" pyproject.toml
          
          # Build the wheel
          python -m build --wheel
          
          # List the built wheel
          ls -la dist/

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: raux-wheel
          path: dist/*.whl
          retention-days: 7

  build-electron:
    needs: [build-preparation, build-wheel]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'raux-electron/package-lock.json'

      - name: Get production version from RAUX/package.json
        id: get-production-version
        run: |
          $VERSION = (Get-Content package.json | ConvertFrom-Json).version
          echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Get electron version from RAUX/raux-electron/package.json
        id: get-electron-version
        run: |
          $VERSION = (Get-Content raux-electron/package.json | ConvertFrom-Json).version
          echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Get RAUX version from RAUX/raux-electron/package.json
        id: get-raux-version
        run: |
          $VERSION = (Get-Content raux-electron/package.json | ConvertFrom-Json).'raux-version'
          echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "Using RAUX version: $VERSION for wheel building"

      - name: Extract CHANGELOG entry
        id: changelog
        run: |
          $version = "${{ needs.build-preparation.outputs.production_version }}"
          $pattern = "## [v$version]"
          $content = Get-Content CHANGELOG.md -Raw
          $regex = "(?s)$pattern(.*?)(?=\n## \[v|$)"
          $notes = [regex]::Match($content, $regex).Groups[1].Value
          if ([string]::IsNullOrEmpty($notes)) {
            $notes = "Release v$version%0ANo release notes available."
          }
          $notes = $notes -replace "\n", "%0A"
          echo "notes=$notes" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Install dependencies
        run: |
          cd raux-electron
          npm ci

      - name: Update production version in root package.json
        run: |
          $json = Get-Content package.json | ConvertFrom-Json
          $json.version = "${{ needs.build-preparation.outputs.production_version }}"
          $json | ConvertTo-Json -Compress | Set-Content package.json
          echo "Updated root package.json version to ${{ needs.build-preparation.outputs.production_version }}"

      - name: Update electron version in raux-electron/package.json
        run: |
          cd raux-electron
          $json = Get-Content package.json | ConvertFrom-Json
          $json.version = "${{ needs.build-preparation.outputs.electron_version }}"
          $json | ConvertTo-Json -Compress | Set-Content package.json
          echo "Updated raux-electron/package.json version to ${{ needs.build-preparation.outputs.electron_version }}"

      - name: Build Electron app (Windows)
        run: |
          cd raux-electron
          npm run make

      - name: Upload raw installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-electron-raw-installer
          path: raux-electron/out/make/squirrel.windows/x64/*.exe
          retention-days: 7

  package-generic:
    needs: [build-preparation, build-wheel, build-electron]
    runs-on: windows-latest
    steps:
      - name: Download raw installer
        uses: actions/download-artifact@v4
        with:
          name: windows-electron-raw-installer

      - name: Download build context am 
        uses: actions/download-artifact@v4
        with:
          name: raux-wheel

      - name: List files in current directory
        run: |
          pwd
          dir

      - name: Setup RAUX Environment (generic)
        run: |
          cp raux-generic.env backend\.env

      - name: Rename installer to raux-generic-setup.exe
        run: |
          mv raux-electron/out/make/squirrel.windows/x64/*.exe raux-electron/out/make/squirrel.windows/x64/raux-generic-setup.exe

      - name: Create SHA256 checksum (generic)
        run: |
          $INSTALLER_PATH = "raux-electron/out/make/squirrel.windows/x64/raux-generic-setup.exe"
          $CHECKSUM = (Get-FileHash -Path $INSTALLER_PATH -Algorithm SHA256).Hash.ToLower()
          $CHECKSUM | Out-File -FilePath "$INSTALLER_PATH.sha256" -Encoding ascii
          echo "Created checksum for installer: $CHECKSUM"

      - name: Upload installer artifact (generic)
        uses: actions/upload-artifact@v4
        with:
          name: raux-generic-setup.exe
          path: raux-electron/out/make/squirrel.windows/x64/raux-generic-setup.exe
          retention-days: 7

      - name: Upload checksum artifact (generic)
        uses: actions/upload-artifact@v4
        with:
          name: raux-generic-setup.exe.sha256
          path: raux-electron/out/make/squirrel.windows/x64/raux-generic-setup.exe.sha256
          retention-days: 7

  package-hybrid:
    needs: [build-preparation, build-wheel, build-electron]
    runs-on: windows-latest
    steps:
      - name: Download raw installer
        uses: actions/download-artifact@v4
        with:
          name: windows-electron-raw-installer

      - name: Download build context
        uses: actions/download-artifact@v4
        with:
          name: raux-wheel

      - name: Setup RAUX Environment (hybrid)
        run: |
          cp raux-hybrid.env backend\.env

      - name: Rename installer to raux-hybrid-setup.exe
        run: |
          mv raux-electron/out/make/squirrel.windows/x64/*.exe raux-electron/out/make/squirrel.windows/x64/raux-hybrid-setup.exe

      - name: Create SHA256 checksum (hybrid)
        run: |
          $INSTALLER_PATH = "raux-electron/out/make/squirrel.windows/x64/raux-hybrid-setup.exe"
          $CHECKSUM = (Get-FileHash -Path $INSTALLER_PATH -Algorithm SHA256).Hash.ToLower()
          $CHECKSUM | Out-File -FilePath "$INSTALLER_PATH.sha256" -Encoding ascii
          echo "Created checksum for installer: $CHECKSUM"

      - name: Upload installer artifact (hybrid)
        uses: actions/upload-artifact@v4
        with:
          name: raux-hybrid-setup.exe
          path: raux-electron/out/make/squirrel.windows/x64/raux-hybrid-setup.exe
          retention-days: 7

      - name: Upload checksum artifact (hybrid)
        uses: actions/upload-artifact@v4
        with:
          name: raux-hybrid-setup.exe.sha256
          path: raux-electron/out/make/squirrel.windows/x64/raux-hybrid-setup.exe.sha256
          retention-days: 7