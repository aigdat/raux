import { app, BrowserWindow } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import { rauxProcessManager } from './rauxProcessManager';
import { setTimeout } from 'timers';
import { isDev } from './envUtils';
import { existsSync, unlinkSync } from 'fs';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const RAUX_URL = 'http://localhost:8080';

const createWindow = (): void => {
  // Remove raux.log if it exists
  const logPath = require('path').join(require('./envUtils').getInstallDir(), 'raux.log');
  if (existsSync(logPath)) unlinkSync(logPath);

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Show a simple loading page only in production
  if (!isDev) {
    mainWindow.loadFile('index.html');
  }

  // Start RAUX backend
  rauxProcessManager.startRaux();

  // Poll for backend readiness
  const pollBackend = () => {
    fetch(RAUX_URL)
      .then(() => {
        mainWindow.loadURL(RAUX_URL);
      })
      .catch(() => {
        if (rauxProcessManager.getStatus() === 'crashed') {
          mainWindow.loadURL('data:text/html,<h1>RAUX failed to start</h1>');
        } else {
          setTimeout(pollBackend, 1000);
        }
      });
  };
  pollBackend();

  // Open the DevTools.
  // mainWindow.webContents.openDevTools(); // Uncomment for debugging
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
