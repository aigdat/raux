import { app } from 'electron';
import { logInfo, logError } from './logger';
import { getAppInstallDir, isDev } from './envUtils';
import { handleSquirrelEvent } from './squirrelEvents';
import { rauxProcessManager } from './rauxProcessManager';
import { setTimeout } from 'timers';
import { python } from './pythonExec';
import { raux } from './rauxSetup';
import { IPCManager } from './ipc/ipcManager';
import { WindowManager } from './windowManager';
import { IPCChannels } from './ipc/ipcChannels';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const RAUX_URL = 'http://localhost:8080';

logInfo(`Main process started\nArgs: ${process.argv.join(' ')}\n`);

if (handleSquirrelEvent()) {
  // Squirrel event handled, exit early
  process.exit(0);
}

logInfo(`Current Environment: ${isDev ? 'Development' : 'Production'}`);
logInfo(`Install dir: ${getAppInstallDir()}`);
logInfo(`RAUX Version: ${process.env.RAUX_VERSION || 'latest'}`);

const ipcManager = IPCManager.getInstance();
const windowManager = WindowManager.getInstance();

const createWindow = async (): Promise<void> => {
  try {
    logInfo('Calling createWindow');
    windowManager.createMainWindow();
    runInstallationAndBackend();
  } catch (err) {
    logError('Error in createWindow: ' + (err && err.toString ? err.toString() : String(err)));
    throw err;
  }
};

const runInstallationAndBackend = async () => {
  try {
    await python.install();

    await raux.install();

    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Installation successful...' });
    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Starting GAIA...' });
    rauxProcessManager.startRaux();
    
    pollBackend();
  } catch (err) {
    logError('Installation or backend startup failed: ' + (err && err.toString ? err.toString() : String(err)));
    ipcManager.sendToAll(IPCChannels.INSTALLATION_ERROR, { type: 'error', message: 'Installation failed. Check logs.' });
    windowManager.showErrorPage('Installation failed');
  }
};

const pollBackend = () => {
  fetch(RAUX_URL)
    .then(() => {
      ipcManager.sendToAll(IPCChannels.INSTALLATION_COMPLETE, { type: 'success', message: 'Backend ready.' });
      windowManager.showMainApp();
    })
    .catch(() => {
      if (rauxProcessManager.getStatus() === 'crashed') {
        windowManager.showErrorPage('RAUX failed to start');
      } else {
        setTimeout(pollBackend, 1000);
      }
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (!windowManager.getMainWindow()) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
