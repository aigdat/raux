#!/usr/bin/env bash
# raux_prebuild: Bash version of raux_prebuild.ps1
# Usage: ./raux_prebuild [--solution-version|--build-frontend|--build-backend|--package]

set -e

# Helper: Print error and exit
fail() {
  echo "ERROR: $1" >&2
  exit 1
}

# Get script root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$SCRIPT_DIR/.."

get_version() {
  local package_json="$REPO_ROOT/package.json"
  if [[ ! -f "$package_json" ]]; then
    fail "package.json not found at $package_json"
  fi
  if ! command -v jq >/dev/null 2>&1; then
    fail "jq is required to parse package.json. Please install jq."
  fi
  local version
  version=$(jq -r '.version' "$package_json")
  echo "Version: $version"
  # For GitHub Actions, output to GITHUB_OUTPUT if set
  if [[ -n "$GITHUB_OUTPUT" ]]; then
    echo "version=$version" >> "$GITHUB_OUTPUT"
  fi
}

build() {
  set -e
  pushd "$REPO_ROOT" >/dev/null
  python3 -m pip install --upgrade pip || fail "pip upgrade failed"
  python3 -m pip install build || fail "pip install build failed"
  python3 -m build . || fail "python build failed"
  popd >/dev/null
}

# Main argument parsing
case "$1" in
  --solution-version)
    get_version
    ;;
  --build)
    build
    ;;
  *)
    echo "No valid parameter provided. Use --solution-version, --build-frontend, --build-backend, or --package."
    exit 1
    ;;
esac 